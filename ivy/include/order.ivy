#lang ivy1.6

module totally_ordered(t) = {
    property (T:t < U & U < V) -> (T < V)
    property ~(T:t < U & U < T)
    property T:t < U | T = U | U < T
}

module totally_ordered_with_zero(t) = {
    instantiate totally_ordered(t)
    property 0 <= X:t
}

module order_iterator(range) = {
    type t = struct {
	iter_end : bool,
	iter_val : range
    }

    definition (X < Y) = ~iter_end(X) & iter_end(Y) 
                      | ~iter_end(X) & ~iter_end(Y) & iter_val(X) < iter_val(Y)

    derived done(X,Y) = iter_end(Y) | X < iter_val(Y)

    action begin(x:range) returns (y:t)
    action end returns (y:t)
    action next(x:t) returns (y:t)
    action prev(y:t) returns (x:t)
    action val(x:t) returns (y:range)
    action over(x:t) returns (y:bool)
    
    object spec = {
	after begin {
	    iter_end(y) := false;
	    iter_val(y) := x
	}
	after end {
	    iter_end(y) := true;
	    iter_val(y) := 0
	}
	before next {
	    assert ~iter_end(x)
	}
	after next {
	    assert X <= iter_val(x) & iter_end(y)
	           | ~(iter_val(x) < Y & Y < iter_val(y))
	             & iter_val(x) < iter_val(y) & ~iter_end(y)
	}

	before prev {
	    assert iter_end(y) | exists X. X < iter_val(y)
	}
	after prev {
	    assert ~iter_end(x);
	    assert X <= iter_val(x) & iter_end(y)
	           | ~(iter_val(x) < Y & Y < iter_val(y))
	             & iter_val(x) < iter_val(y) & ~iter_end(y)
	}

	before val {
	    assert ~iter_end(x)
	}
	after val {
	    y := iter_val(x)
	}
	after over {
	    y := iter_end(x)
	}
    }
}

