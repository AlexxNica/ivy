#lang ivy1.6

################################################################################
#
# Arrays
#
# Array types represent maps from an interval [0,end) of a type
# "domain" to a type "range".  An array type thing.t can be created
# like this:
#
#    instance thing : array(domain.t,range.t)
#
# The implementation of this type requires that domain.t be
# interpreted as 'int'.


module array(domain,range) = {

    type t

    # return an array with end=s and all values mapped to y
    action create(s:domain,y:range) returns (a:t)

    # mutate an array a so that x in [0,end) maps to y
    action set(a:t,x:domain,y:range) returns (a:t)

    # get the value y such that x in [0,end) maps to y in array a
    action get(a:t,x:domain) returns (y:range) 

    # get the value of end
    action size(a:t) returns (s:domain)
    
    # change the size of the array
    action resize(a:t,s:domain,v:range) returns (a:t)

    ########################################
    # Representation
    #
    # Function "end" gives the end value of an array while value(a,x)
    # gives the value that x maps to in a.

    function end(A:t) : domain
    function value(A:t,X:domain) : range

    ########################################
    # Specification
    #
    # Notice that get and set have the precondition that x is in
    # [0,end).


    object spec = {
	before create {
	    assert 0 <= s
	}
	after create {
	    assert end(a) = s & value(a,X) = y
	}
        before set {
	    assert 0 <= x & x < end(a)
	}	       	 
	after set {
	    assert value(a,X) = y if X = x else value(old a,X)
	}
	before get {
	    assert 0 <= x & x < end(a)
	}
	after get {
	    assert value(a,x) = y
	}
	after size {
	    assert s = end(a)
	}
	after resize {
	    assert end(a) = s;
	    assert 0 <= X & X < end(old a) -> value(a,X) = value(old a,X);
	    assert end(old a) <= X & X < s -> value(a,X) = v
	}
    }

    object impl = {

	interpret t -> <<< std::vector<`range`> >>>

	definition value(a:t,i:domain) = <<< (0 <= `i` && `i` < `a`.size()) ? `a`[`i`] : val >>>

	definition end(a:t) = <<< `a`.size() >>>

	implement create {
	    <<<
	        `a`.resize(`s`);
	        for (unsigned i = 0; i < `s`; i++)
	            `a`[i] = y;
	    >>>
	}

	implement set {
	    <<<
	        if (0 <= `x` && `x` < (`domain`)`a`.size()) 
	            `a`[`x`] = `y`;
	    >>>
	}

	implement get {
	    <<<
	        if (0 <= `x` && `x` < (`domain`)`a`.size()) 
	            `y` = `a`[`x`];
	    >>>
	}

	implement size {
	    <<<
	        `s` = (`domain`) `a`.size();
	    >>>
	}

	implement resize {
	    <<<
	        unsigned __old_size = `a`.size();
	        `a`.resize(`s`);
	        for (unsigned i = __old_size; i < (unsigned)`s`; i++)
	            `a`[i] = v;
            >>>
        }

	<<< impl
	    std::ostream &operator <<(std::ostream &s, const `t` &a) {
	        s << '[';
		for (unsigned i = 0; i < a.size(); i++) {
		    if (i != 0)
		        s << ',';
		    s << a[i];
		}
	        s << ']';
	    }

	    template <>
	    `t` _arg<`t`>(std::vector<ivy_value> &args, unsigned idx, int bound) {
	        ivy_value &arg = args[idx];
	        if (arg.atom.size()) 
	            throw out_of_bounds(idx);
	        `t` a;
	        a.resize(arg.fields.size());
		for (unsigned i = 0; i < a.size(); i++) {
		    a[i] = _arg<`range`>(arg.fields,i,0x7fffffff);
	        }
	        return a;
	    }
	>>>
    }
}

################################################################################
#
# Maps. 
#
# This module provides a relational model of a function from a type
# dom to a type rng. Initially, everything is mapped to the element zero.
# 
# The key invariant of a map is that it is a function, i.e., for every
# X there exists a Y such that map(X,Y). The module does not state
# this invariant, however, since the quantifier alternation could
# destroy stratification.  Instead it provides a "lemma" that allows
# the user to instantiate Y for particular values of X.
#
# Parameters:
#
#  dom        The domain type
#  rng        The range type
#  zero       The initial value for every domain element

module map(dom,rng,zero) = {

    relation map(X:dom,Y:rng)

    action set_(x:dom,y:rng)
    # get the value of x
    action get(x:dom) returns (y:rng)
    # prove there exists a value for x
    action lemma(x:dom)

    object spec = {
	init map(X,Y) <-> Y = zero

	implement set_(x:dom,y:rng) {
	    call lemma(x);
	    map(x,Y) := Y = y
	}
	implement get(x:dom) returns (y:rng) {
	    assume map(x,y)
	}
	implement lemma(x:dom) {
	    assume exists Y. map(x,Y)
	}
    }
    conjecture map(K,L) & map(K,M) -> L = M
}

module set_wrapper(key) = {

    object s = {}

    <<< header
	#include <set>
    >>>

    <<< member
	std::set<`key`> `s`;
    >>>

    <<< init
        `s`.insert(0);
    >>>

    implement insert(x:key) {
	<<<
	    `s`.insert(`x`);
	>>>
    }

    implement erase(lo:key,hi:key) {
	<<<
            `s`.erase(`s`.lower_bound(`lo`),`s`.upper_bound(`hi`));
	>>>
    }

    implement get_glb(k:key) returns (res:key) {
	<<<
            `res` = *(--`s`.upper_bound(`k`));
	>>>
	
    }


}

################################################################################
#
# Ordered set representation
#
# This is intended to be implemented using the STL set template.
#
# Ordered sets assume the element type has a total non-strict order,
# with a least element 0.  They provide insertion of elements (in log
# time), deletion of ranges (in n log(n) time) and finding greatest
# lower bounds (log n).
# 
# For help with proofs, this module also provides an auxiliary map
# "succ" that gives the successor of every element in the set. The
# "successor" of the maximal element in the set is 0.

module ordered_set(key) = {

    action insert(nkey:key)
    action erase(lo:key,hi:key)
    action get_glb(k:key) returns (res:key)

    relation s(K:key)

    instantiate succ : map(key,key,0) # ghost

    object spec = {
	init s(K) <-> K = 0
	# insert one element
	before insert {
	    s(nkey) := true;

	    # following is ghost code to update the successor relation
	    local v:key {
		if some lub:key. ~(lub <= nkey) & s(lub) minimizing lub {
		    v := lub
		}
		else {
		    v := 0
		};
		call succ.set_(nkey,v)
	    };
	    if some glb:key. ~(nkey <= glb) & s(glb) maximizing glb {
		call succ.lemma(glb); # instantiate succ(glb)
		call succ.set_(glb,nkey)
	    }
	}

	# erase elements in a closed interval
	before erase {
	    s(K) := s(K) & ~(lo <= K & K <= hi)
	}

	# the the greatest element <= k
	after get_glb {
	    if some glb:key. glb <= k & s(glb) maximizing glb {
		call succ.lemma(glb); # instantiate succ(glb)
		assume res = glb
	    }
	}
    }

    # Useful invariants of the "succ" relation. The successor of K is
    # also in the set, and nothing between K and its successor is in
    # the set. Here, if L = 0 it means K is the maximim element, so we
    # have to treat this as a special case.

    conjecture s(K) & succ.map(K,L) & L ~= 0 -> ~(L <= K) & s(L)
    conjecture s(K) & succ.map(K,L) & ~(M <= K) & (L = 0 | ~(L <= M)) -> ~s(M)

    instance impl : set_wrapper(key)

}

module map_wrapper(key,value) = {

    object s = {}

    <<< header
	#include <map>
    >>>

    <<< member
	std::map<`key.t`,`value`> `s`;
    >>>

    <<< init
    >>>

    implement set(x:key.t,y:value) {
	<<<
	    `s`[`x`] = `y`;
	>>>
    }

    implement get(x:key.t) returns (y:value) {
	<<<
	    std::map<`key.t`,`value`>::iterator it = `s`.find(`x`);
	    if (it == `s`.end()) {
	        `y` = 0;
	    } else {
	        `y` = it->second;
	    }
	>>>
    }

    implement erase(lo:key.t,hi:key.t) {
	<<<
            `s`.erase(`s`.lower_bound(`lo`),`s`.upper_bound(`hi`));
	>>>
    }

    implement begin(k:key.t) returns (res:key.iter.t) {
	<<<
	    std::map<`key.t`,`value`>::iterator it = `s`.lower_bound(`k`);
	    if (it == `s`.end()) {
	        `res`.iter_end = true;
	        `res`.iter_val = 0;
	    } else {
                `res`.iter_end = false;
	        `res`.iter_val = it->first;
	    }
	>>>
	
    }

    implement next(inp:key.iter.t) returns (res:key.iter.t) {
	<<<
	    std::map<`key.t`,`value`>::iterator __it = `s`.upper_bound(`inp`.iter_val);
	    if (__it == `s`.end()) {
	        `res`.iter_end = true;
	        `res`.iter_val = 0;
	    } else {
                `res`.iter_end = false;
	        `res`.iter_val = __it->first;
	    }
	>>>
    }
}

################################################################################
#
# Ordered map representation
#
# This is intended to be implemented using the STL map template.
#
# Ordered maps assume the key type has a total non-strict order, with
# a least element 0 and iteration.  They provide insertion of
# key/value pairs (in log time), deletion of ranges of keys (in n
# log(n) time) and iteration.
# 
# For help with proofs, this module also provides an auxiliary map
# "succ" that gives the successor of every element in the map. The
# "successor" of the maximal element in the map is 0.

module ordered_map(key,value) = {

    # set the value of key k
    action set(nkey:key.t,v:value)

    # get the value of key k or zero
    action get(k:key.t) returns (v:value)

    # remove all leys in range [lo,hi]
    action erase(lo:key.t,hi:key.t)

    # iterator to least key >= k or end
    action begin(k:key.t) returns (res:key.iter.t)

    # iterator least key > iter or end
    action next(it:key.iter.t) returns (res:key.iter.t)

    relation s(K:key.t)
    relation r(K:key.t,V:value)
    
#    instantiate succ : map(key.t,key.t,0) # ghost


    object spec = {

	init ~s(K) & ~r(K,V)

	# insert one element
	before set {
	    s(nkey) := true;
	    r(nkey,X) := X = v

            # ;

	    # # following is ghost code to update the successor relation
	    # local sk:key.t {
	    # 	if some (lub:key.t) ~(lub <= nkey) & s(lub) minimizing lub {
	    # 	    sk := lub
	    # 	}
	    # 	else {
	    # 	    sk := 0
	    # 	};
	    # 	call succ.set_(nkey,sk)
	    # };
	    # if some (glb:key.t) ~(nkey <= glb) & s(glb) maximizing glb {
	    # 	call succ.lemma(glb); # instantiate succ(glb)
	    # 	call succ.set_(glb,nkey)


	}

	after get {
	    assert r(k,v) & s(k) | ~s(k) & v = 0
	}

	# erase elements in a closed interval
	before erase {
	    s(K) := s(K) & ~(lo <= K & K <= hi);
	    r(K,V) := r(K,V) & ~(lo <= K & K <= hi)
	}

	after begin {
	    local foo:key.t {
		if some (lub:key.t) lub >= k & s(lub) minimizing lub {
		    assert res < key.iter.end & key.iter.val(res) = lub
		}
		else {
		    assert res = key.iter.end
		}
	    }
	}

	before next {
	    assert it < key.iter.end
	}

	after next {
	    local k:key.t {
		k := key.iter.val(it);
#		call succ.lemma(k);
		if some (lub:key.t) lub > k & s(lub) minimizing lub {
		    assert key.iter.val(res) = lub
		}
		else {
		    assert res = key.iter.end
		}
	    }
	}

    }


    # Useful invariants of the "succ" relation. The successor of K is
    # also in the map, and nothing between K and its successor is in
    # the map. Here, if L = 0 it means K is the maximim element, so we
    # have to treat this as a special case.

#    conjecture s(K) & succ.map(K,L) & L ~= 0 -> ~(L <= K) & s(L)
#    conjecture s(K) & succ.map(K,L) & ~(M <= K) & (L = 0 | ~(L <= M)) -> ~s(M)

    # Mapping relation R is injective

    conjecture r(X,Y) & r(X,Z) -> Y = Z

    instance impl : map_wrapper(key,value)

}
