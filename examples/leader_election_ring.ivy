#lang ivy1.6

################################################################################
#
# A module containing the axioms of total order
#
################################################################################

module total_order_axioms(t) = {
    relation (X:t < Y:t)
    axiom [transitivity] X:t < Y & Y < Z -> X < Z
    axiom [antisymmetry] ~(X:t < Y & Y < X)
    axiom [totality] X:t < Y | X = Y | Y < X
}

################################################################################
#
# A module containing the injectivity axiom
#
################################################################################

module injectivity_axioms(f) = {
    axiom [injectivity] f(X) = f(Y) -> X = Y
}

################################################################################
#
# ADT describing a totally ordered datatype
#
################################################################################

module total_order = {
    type t
    instantiate total_order_axioms(t)   # t is totally ordered
}

################################################################################
#
# ADT describing a ring topology.
#
# The module includes a ring_head and ring_tail elements, and a ring
# total order relation.
#
# The module also includes get_next and get_prev actions.
#
# In this module, the ring topology is arbitrary and fixed.
#
################################################################################

module ring = {
    type t

    individual head:t  # ring head
    individual tail:t  # ring tail

    # Axioms that ensure that le is a total order, with head the
    # minimal element and tail the maximal element.

    instantiate total_order_axioms(t)   # t is totally ordered
    axiom head <= X              # head is minimal
    axiom X <= tail              # tail is maximal

    action get_next(x:t) returns (y:t)
    action get_prev(y:t) returns (x:t)

    object spec = {
	after get_next {
	    assert (x = tail & y = head) | (x < y & ~ (x < Z & Z < y))
	}

	after get_prev {
	    assert (x = tail & y = head) | (x < y & ~ (x < Z & Z < y))
	}
    }
}


################################################################################
#
# Types, relations and functions describing state of the network
#
################################################################################

# A totally ordered set of ids
instance id : total_order

# A ring topology of nodes
instance node : ring

################################################################################
#
# The transport-layer service specification
#
################################################################################

object trans = {
    relation pending(V:id.t, N:node.t) # The identity V is pending at node N
    init ~pending(V, N)
    
    action send(v:id.t, n:node.t)
    action recv(v:id.t, n:node.t)

    object spec = {
	before send {
	    pending(v,n) := true
	}
	before recv {
	    assert pending(v,n)
	}
    }
}

################################################################################
#
# The high-level service specification
#
################################################################################


object serv = {
    action claim_leadership(v:id.t)

    object spec = {
	before claim_leadership {
	    assert v >= app(X).pid  # only the max pid can claim leadership
	}
    }
}

################################################################################
#
# The high-level protocol
#
################################################################################

module process(me) = {

    individual pid : id.t          # the id of this process

    action send = {
	call trans.send(pid,node.get_next(me))
    }

    implement trans.recv {
        if v = pid {  # Found a leader
            call serv.claim_leadership(me)
        }
	else if v > pid  { # pass message to next node
	    call trans.send(v,node.get_next(me))
        }
    }

    # The safety property:
#    conjecture leader & app(Y).leader -> me = Y  # at most one leader
#    conjecture leader -> pid >= app.pid(Y)       # leader has highest id
}

# instantiate one process per ring element

instance app(R:node.t) : process(R)

# We have to assume that all the processes have unique ids

# instantiate injectivity_axioms(app.pid)

import serv.claim_leadersip
export app.send
export trans.recv

isolate iso_app = app with node,id,trans,serv

# conjectures obtained via CTI's
# conjecture ~(le(idn(N1),idn(N0)) & pending(idn(N1),N1) & idn(N1) ~= idn(N0))
# conjecture ~(le(idn(N2),idn(N0)) & pending(idn(N2),N1) & ring.le(N0,N1) & ring.le(N2,N0) & N0 ~= N2 & N1 ~= N0)
# conjecture ~(le(idn(N2),idn(N0)) & pending(idn(N2),N1) & ring.le(N0,N1) & ring.le(N1,N2) & N1 ~= N0)
# conjecture ~(le(idn(N2),idn(N0)) & pending(idn(N2),N1) & ring.le(N1,N2) & ring.le(N2,N0) & N0 ~= N2)
