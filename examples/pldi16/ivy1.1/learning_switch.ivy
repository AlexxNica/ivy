#lang ivy1.1

type packet
type node

module lone(f) = {
    axiom ~f(X, Y1) | ~f(X, Y2) | Y1 = Y2
}

relation src(P:packet, H:node) # The src field of a packet
instantiate lone(src)

relation dst(P:packet, H:node) # The dst field of a packet
instantiate lone(dst)

relation pending(P:packet, S1:node, S2:node) # A pending packet P on a link from S1 to S2
init ~pending(P, S, T) # Pending is empty

relation link(S:node, T:node) # Topology
axiom ~link(S, S) # No self cycles
axiom ~link(S1, S2) | link(S2, S1) # Symmetric links

# route(H, S1, S2) --- Packets to H are rerouted from S to T
# reach(H, S1, S2) --- path[(X, Y). route(H, X, Y)](S1, S2)
relation reach(H:node, S1:node, S2:node)
relation route_domain(H:node, S1:node) # exists S2: route(H, S1, S2)

macro insert_route(h, v, w) =   {
    # assert ~reach(h, w, v); # Ensures acyclicity
    route_domain(h, v) := true;
    reach(h,X,Y) := reach(h,X,Y) | reach(h, X, v) & reach(h,w, Y)
}

macro assume_route(h, u, v) = {
    assume reach(h, u, v) & u ~= v & (~reach(h, u, X) | u = X | reach(h, v, X))
}

# initially no routes
init reach(H, X, Y) <-> X = Y
init ~route_domain(H, S)

# axioms, but using conjectures to also verify their consistency
conjecture reach(H, X, X) # Reflexive
conjecture ~reach(H, X, Y) | ~reach(H, Y, Z) | reach(H, X, Z) # Transitive
conjecture ~reach(H, X, Y) | ~reach(H, Y, X) | X = Y # Anti symmetric
conjecture ~reach(H, X, Y) | ~reach(H, X, Z) | reach(H, Y, Z) | reach(H, Z, Y) # Linear
conjecture (reach(H, X, Y) & X ~= Y) -> route_domain(H, X)

individual p:packet
individual sw0:node, sw1:node, sw2:node
individual s:node
individual d:node

action step = {
    s := *;
    d := *;
    p := *;
    sw0 := *;
    sw1 := *;
    sw2 := *;

    if * {
        # Create a new packet, by adding it to pending from the src to itself
        assume src(p, s);
        pending(p, s, s) := true

    } else {
        # Handle a pending packet

        assume pending(p, sw0, sw1);
        assume src(p, s);
        assume dst(p, d);

        pending(p, sw0, sw1) := *;

        #The learning part
        if ~route_domain(s, sw1) & s ~= sw1 {
            #assert ~reach(s, sw0, sw1);
            instantiate insert_route(s, sw1, sw0)
        };

        # The forwarding part
        if d ~= sw1 {
            if ~route_domain(d, sw1)  {
                # flood the packet
                pending(p,sw1,Y) := pending(p,sw1,Y) | (link(sw1, Y) & Y ~= sw0)
            } else {
                # forward according to routing table
                instantiate assume_route(d, sw1, sw2);
                pending(p, sw1, sw2) := true
            }
        }

    }
}

# the safety property
conjecture (
    (
        pending(P, SW0, SW1) &
        src(P, S) &
        dst(P, D) &
        ~route_domain(S, SW1) &
        S ~= SW1
    ) -> ~reach(S, SW0, SW1)
)

# conjectures found using cti's
conjecture ~(reach(N1, N1, N0) & N1 ~= N0)
conjecture ~route_domain(N0, N0)
conjecture ~(pending(P0, N0, N1) & src(P0, N2) & ~route_domain(N2, N0) & N0 ~= N2)
conjecture ~(dst(P0, N2) & pending(P0, N2, N1) & N1 ~= N2)
conjecture ~(reach(N0, N1, N2) & ~route_domain(N0, N2) & N0 ~= N2 & N1 ~= N2)
