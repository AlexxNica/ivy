#lang ivy1.3

################################################################################
#
# This is a (more) concrete specification of the tilelink protocol. It specifies
# the low-level messages with reference to the abstract spec. 
#
# The concrete model introduces Acquire and Finish messages, requester ID's,
# and other fields that indicate the address range to operate on, and so on.
#
################################################################################


################################################################################
#
# Oustanding issues:
#
#   Managers must include an up-to-date copy of the
#   data in Grants responding to Acquires upgrading permissions unless
#   they are certain that client has not been Probed since the Aquire
#   was issued.
#
# TODO: currently the spec requires all Grants to have data, even
# in the upgrade case.
#
#   The voluntary write’s data can be used to respond to the original
#   requestor with a Grant, but the transaction cannot complete until
#   the expected number of Releases have been collected by the manager.
#
# TODO: The spec may be too strict here, since it doesn't allow any grants
# to the acquiring client while there is an outstanding probe, even if a
# voluntary write has come in in the interim.
#
#
#   Managers are not obligated to accept both Acquires and merge the
#   transactions’ message flows, though they may choose to do so.
#
# TODO: In case of an upgrade, the spec requires the transactions to be merged.
################################################################################


include tilelink_abstract_spec

########################################
# type of TileLink ID

type tl_id


########################################
# set of addresses that can be requested

type tl_addrset

########################################
# address high and low-order bits

type tl_addrhi
type tl_addrlo

########################################
# construct adresses from high- and low-order bits

individual addr_cons(X:tl_addrhi,Y:tl_addrlo) : addr

# address constructor is an injection
axiom addr_cons(X1,Y1) = addr_cons(X2,Y2) -> X1=X2 & Y1=Y2

########################################
# semantics of address sets
# an addreset set must be a subset of a cache line

individual addrset_hi(X:tl_addrset) : tl_addrhi
relation addrset_lo(X:tl_addrset,Y:tl_addrlo)

relation addrset_contains(X:tl_addrset, Y:addr)
axiom addrset_contains(X,addr_cons(H,L)) <-> H = addrset_hi(X) & addrset_lo(X,L)


########################################
# structure representing Acquire message

module acq = {
    individual id_ : id               # id of requester
    individual addr_hi : tl_addrhi    # hi order bits of address
    individual word : tl_addrlo       # requested word if uncached
    individual own:ownership          # what ownership type? (none=uncached)
    individual op : otype             # what operation?
    individual data_ : data           # what data, if any?
    individual ltime_ : ltime         # logical time (ghost)
}

########################################
# Heap of acquire messages

type acq_id
instantiate acqs(X:acq_id) : acq

########################################
# structure representing Grant message

module gnt = {
    individual id_ : id               # transaction id
    individual word : tl_addrlo       # low-order bits of this response
    individual own:ownership          # what ownership type? (none = uncached)
    relation relack                   # is this an ack of a Release?
    individual data_ : data           # return value, if any
    individual ltime_ : ltime         # logical time (ghost)
}

########################################
# Heap of grant messages

type gnt_id
instantiate gnts(X:gnt_id) : gnt

########################################
# structure representing Finish message

module fns = {
    individual id_ : id             # transaction id
}

########################################
# Heap of finish messages

type fns_id
instantiate fnss(X:fns_id) : fns

########################################
# structure representing Release message

module rls = {
    individual id_ : id             # id of requester
    relation voluntary              # is this a voluntary release?
    individual addr_hi : tl_addrhi  # hi order bits of address
    individual word :tl_addrlo      # word being released
    individual data_ : data         # data, if exclusive release
}

########################################
# Heap of release messages

type rls_id
instantiate rlss(X:rls_id) : rls


########################################
# structure representing probe message

module prb = {
    individual id_ : id             # id of receiver
    individual addr_hi : tl_addrhi  # hi order bits of address
}

########################################
# Heap of probe messages

type prb_id
instantiate prbs(X:prb_id) : prb

########################################
# Stub actions for mixins

module interface_stubs = {
    action release(a:addr, d:data, o:ownership) = {}
    action grant(a:addr, d:data, o:ownership) = {}
    action request(a:addr, d:data, mo:otype, lt:ltime) = {}
    action response(a:addr, d:data, mo:otype, lt:ltime) = {}
}


module tl_interface(ref,clnt,mngr,side) = {

    ########################################
    # whether a line is cached

    relation cached_hi(X:tl_addrhi)

    ########################################
    # pending acquires
    #
    # An Acquire message is considered to be *pending* from the time
    # it is transmitted until the time its last Grant has been
    # transmitted.

    relation pend_acq(M:acq_id)

    ########################################
    # acquires accepted by manager
    #
    # An Acquire message is considered to be *accepted* from the time
    # its first Grant has been transmitted until the time its
    # Finish is transmitted.

    relation accepted(M:acq_id)

    ########################################
    # words unserved for accepted acquires
    #
    # A word of an Acquire message is considered to be *unserved* from the time
    # the Acquire is transmitted until the Grant for the corresponding word
    # is transmitted.
   
    relation unserved(M:acq_id,W:tl_addrlo)

    ########################################
    # pending release messages
    #
    # A voluntary Release message is considered to be *pending* from
    # the time it is transmitted until the time its Grant has been
    # transmitted.
    # 

    relation pend_rls(M:rls_id)

    ########################################
    # pending probe messages
    #
    # A word of a Probe message is considered to be *pending* from
    # the time the Probe is transmitted until the time the
    # corresponding involuntary Release is transmitted.
    # 

    relation pend_prb(M:prb_id, W:tl_addrlo)

    ########################################
    # Initial condition of interface

    init ~pend_acq(M) & ~accepted(M) & ~unserved(M,W) & ~pend_rls(R) & ~pend_prb(P,W)

    ########################################
    # Find the pending voluntary Release matching ID and lo bits.

    action find_release(mid:id, lo:tl_addrlo) returns(req:rls_id) = {
        assert exists M. pend_rls(M) & rlss(M).id_ = mid & rlss(M).word = lo & rlss(M).voluntary;
        assume pend_rls(req) & rlss(req).id_ = mid & rlss(req).word = lo & rlss(req).voluntary
    }

    ########################################
    # Find the pending Probe matching a Release.
    # A probe matches if same id and same hi addr

    action find_probe(msg: rls_id) returns (req:prb_id) = {
        assert exists P. pend_prb(P,rlss(msg).word) & prbs(P).id_ = rlss(msg).id_
	                     & prbs(P).addr_hi = rlss(msg).addr_hi;
        assume pend_prb(req,rlss(msg).word) & prbs(req).id_ = rlss(msg).id_
	                     & prbs(req).addr_hi = rlss(msg).addr_hi
    }
	   

    ########################################
    # An Aquire/Acquire conflict is a pending Acquire N with
    # the same id and same ownership

    derived aaconfl(M:acq_id, N:acq_id) = 
         pend_acq(N) & acqs(N).own = acqs(M).own & acqs(M).id_ = acqs(N).id_


    ########################################
    # An Acquire/Release conflict with a Release M is any pending Aquire N
    # with same ID (TODO: currently is any ID).

    derived arconfl(M:rls_id, N:acq_id) = 
         pend_acq(N) & acqs(N).addr_hi = rlss(M).addr_hi


    ########################################
    # An Release/Acquire conflict is a pending Release N with
    # the same client id and same hi addr (TODO: currently is any ID).

    derived raconfl(M:acq_id, N:rls_id) = 
         pend_rls(N) & rlss(N).addr_hi = acqs(M).addr_hi 

    ########################################
    # An Release/Release conflict is a pending Release N with
    # the same id and address (TODO: currently is any ID).

    derived rrconfl(M:rls_id, N:rls_id) = 
         pend_rls(N) & rlss(N).addr_hi = rlss(M).addr_hi & rlss(N).word = rlss(M).word

    ########################################
    # An Aquire/Grant conflict is a pending Release N with
    # the same id, ownership and word (TODO: currently is any ID).

    derived agconfl(M:gnt_id,N:acq_id) =
       pend_acq(N) & acqs(N).id_ = gnts(M).id_ & acqs(N).own = gnts(M).own &
           (gnts(M).own ~= none | acqs(N).word = gnts(M).word)


    ########################################
    # specification of Acquire message

    action tl_Acquire(msg:acq_id) = {

        ########################################
        # rules for uncached Acquires
	#

	if acqs(msg).own = none {

	    # (1) May not have pending acquire with same transaction ID and ownership and word.

    	    assert ~(aaconfl(msg,M) & acqs(msg).word = acqs(M).word);

	    # (2) May not have pending acquire with same transaction ID and different line.

    	    assert ~(aaconfl(msg,M) & acqs(msg).addr_hi ~= acqs(M).addr_hi);

	    # (3) No two lock operations can be pending for the same
	    # client. This is required for release consistency,
	    # which would be violated by reordering lock operations.

    	    assert ~(pend_acq(M) & acqs(M).own = none
	             & ref.evs(acqs(M).ltime_).id_ = ref.evs(acqs(msg).ltime_).id_
	             & (ref.evs(acqs(M).ltime_).type_ = cas | ref.evs(acqs(msg).ltime_).type_ = cas));

	    # (4) No two operations pending on same address for the same
	    # client. This is required for release consistency,
	    # which would be violated by reordering lock operations.
	    # TODO: no client ID's yet

    	    assert ~(pend_acq(M) & acqs(M).own = none
	             & ref.evs(acqs(M).ltime_).id_ = ref.evs(acqs(msg).ltime_).id_
	             & ref.evs(acqs(M).ltime_).addr_ = ref.evs(acqs(msg).ltime_).addr_);

            # mark the request word as unserved

	    unserved(msg,acqs(msg).word) := true

        }

        ########################################
        # rules for cached Acquires
	#

	else {

	    # (1) May not have pending acquire with same ID and ownership and with
	    # same hi addr. We can, however, have more than one ownership
	    # request in same transaction.

    	    assert ~aaconfl(msg,M);

	    # (2) May not have a pending release with same ID and same hi addr.
	    
	    assert ~raconfl(msg,M);

            # mark the entire line as unserved

	    unserved(msg,W) := true

        };

        ########################################
        # Rule: acquires must be cached only if in cached space
	#

	assert cached_hi(acqs(msg).addr_hi) <-> acqs(msg).own ~= none;

        ########################################
        # Update the interface state 
	#

        pend_acq(msg) := true;  # mark acquire pending

        ########################################
        # Perform abstract operations
	#

	if acqs(msg).own = none { # uncached
		call abs.request(addr_cons(acqs(msg).addr_hi,acqs(msg).word),
                                 acqs(msg).data_,acqs(msg).op,acqs(msg).ltime_)
	}
	# (cached acquires don't correspond to any abstract action) 

    }
    mixin tl_Acquire before mngr.tl_Acquire    

    ########################################
    # specification of Grant message

    action tl_Grant(msg:gnt_id) = {
        local req:acq_id, rls:rls_id, reqt:time, maddr:addr {
	
	    if gnts(msg).relack {

		########################################
		# A release ack marks the matching Release as completed

	        rls := find_release(gnts(msg).id_,gnts(msg).word);         # find matching release
		pend_rls(rls) := false;                                    # mark it completed (no Finish)

	        ########################################
		# Rules for release acks:
		#
		# (1) Cannot ack a release if there is a pending Acquire that matches
		# the release (must wait for Finish).
		#

		assert ~arconfl(rls,M)
            }
            else {	    

		########################################
		# Rule:
		#
		# Cannot grant if there are accepted acquires with a
		# difference transaction ID.
		#
		# TODO: can we grant if the transactions have
		# different clients?

		assert ~(accepted(M) & acqs(M).id_ ~= gnts(msg).id_);
	        
		########################################
		# Rule:
		# 
		# A Grant must match an accepted pending Acquire. 
		# If there is no such, a matching pending but unaccepted
		# Acquire may be accepted.

		if forall M:acq_id. ~(agconfl(msg,M:acq_id) & accepted(M:acq_id)) {
		   assert exists M. agconfl(msg,M) & ~accepted(M);
		   assume agconfl(msg,req) & ~accepted(req);
		   accepted(req) := true
                } else {
		   assume agconfl(msg,req) & accepted(req)
	        };
		   		 
	        ########################################
		# Rule:
		#
                # Cannot merge two acquires with different addresses.

		assert ~(accepted(M) & acqs(M).addr_hi ~= acqs(req).addr_hi);

	        ########################################
		# Rule:
		#
		# Cannot grant if there is a pending probe with same client id and
		# the same hi address.
		# 
		# TODO: currently ignores client ID. In case of
		# multiple clients we should be able to grant to the
		# acquiring client while the probe is pending, if we
		# have seen a voluntary release.
		#

		assert ~(pend_prb(M,W) & acqs(req).addr_hi = prbs(M).addr_hi);


	        ########################################
		# mark the word served

		unserved(req,gnts(msg).word) := false;

	        ########################################
		# if all served, mark the req not pending

		if forall W:tl_addrlo. ~unserved(req,W:tl_addrlo) {
		    pend_acq(req) := false
                };

	        ########################################
		# Abstract semantics of grant

		maddr := addr_cons(acqs(req).addr_hi,gnts(msg).word);  # construct full address
		if acqs(req).own ~= none {    	                       # cached: perform an abstract grant
		    call abs.grant(maddr,gnts(msg).data_,acqs(req).own)
		}
		else {		                                       # uncached: perform an abstract response
		    call abs.response(maddr,gnts(msg).data_,acqs(req).op,acqs(req).ltime_)
		}
            }
        }

    }
    mixin tl_Grant before clnt.tl_Grant

    ########################################
    # specification of Finish message
    #
    # A finish marks all the Acquires in a transaction as completed.

    action tl_Finish(msg:fns_id) = {
        local req:acq_id {
	
	    ########################################
	    # Rule: A finished transaction must correspond to
	    # some completed acquire.
	    	
	    assert exists M. (accepted(M) & ~pend_acq(M) & acqs(M).id_ = fnss(msg).id_);

	    ########################################
	    # Arbitrarily choose a matching Acquire
	    #
	    # Invariant: All the accepted acquires with a given transaction id
	    # have the same address. 
	    #
	    # As a result, even though we may not choose the acquire here that has
	    # actually finished, the number of accepted acquires with a given address	
	    # is still correct, and upper-bounds the number of grants for that address
	    # that may be latent in a channel.
	    #
	    # The proof of this might be simplified by giving the Finish
	    # message a ghost field that indicate the matching Acquire.

	    assume (accepted(req) & ~pend_acq(req) & acqs(req).id_ = fnss(msg).id_);

	    # Finish the Acquire

	    accepted(req) := false
        }
    }   
    mixin tl_Finish before mngr.tl_Finish    

    ########################################
    # specification of Release message

    action tl_Release(msg:rls_id) = {


        ########################################
        # No release with pending release with same ID and word.
	# Because a voluntary release has to be acked before an involuntary
	# release can be issued, we can never have two matching releases
	# pending.

	assert ~rrconfl(msg,M);

	if rlss(msg).voluntary {

	    ########################################
	    # Voluntary release. Mark as pending. 
	    #

	    pend_rls(msg) := true;

	    ########################################
	    # Rule: No voluntary release with pending acquire on same address.

	    assert ~arconfl(msg,M)

        }
	else {
	
	    ########################################
	    # Involuntary release. Must exist a pending
	    # probe with same client id and same full eaddress.
	    #
	    # Note we *do* allow an involuntary relase with
	    # a pending Acquire.
	    # 

	    local p:prb_id {
	        p := find_probe(msg);
		pend_prb(p,rlss(msg).word) := false   # mark the word released
            }
        };

	# The abstract semantics

	local a:addr {

	    a := addr_cons(rlss(msg).addr_hi,rlss(msg).word);

	    ########################################
	    # Must have some privs on released words
            # if release is volunrary (TODO: needed?)
	    	    
	    assert excl_p(a) | shrd_p(a);  # these are abs state

	    # call abstract spec to release all privs

	    if excl_p(a) {
	        call abs.release(a,rlss(msg).data_,excl)
            };
	    if shrd_p(a) {
	        call abs.release(a,rlss(msg).data_,shrd)
            }

        }
    }
    mixin tl_Release before mngr.tl_Release

    ########################################
    # specification of Probe message

    action tl_Probe(msg:prb_id) = {
    
        ########################################
	# Rules for probe

	# 1) No pending probes with same transaction id and hi address
	# (TODO: currently ignores ID)

	assert ~(pend_prb(M,W) & prbs(M).addr_hi = prbs(msg).addr_hi);

	# 2) No pending releases with same client id hi address
	# (TODO: currently ignores ID)

	assert ~(pend_rls(M) & rlss(M).addr_hi = prbs(msg).addr_hi);

        # 3) No probe if an Acquire has been accepted with same
	# hi address but is not finished.

	assert ~(accepted(M) & acqs(M).addr_hi = prbs(msg).addr_hi);

	# 5) Can only probe if client has privs on all words
	# TODO: necessary?

	assert excl_p(addr_cons(prbs(msg).addr_hi,W)) | shrd_p(addr_cons(prbs(msg).addr_hi,W));

	########################################
	# Mark the probe pending (for all words)

	pend_prb(msg,W) := true

    }
    mixin tl_Probe before clnt.tl_Probe

    ########################################
    # 
    # Instantiate the abstract interface specification
    #
    ########################################


    instantiate abs : interface_stubs
    instantiate interface(ref,abs,abs,side)

    ########################################
    # 
    # All or none of a line is cached
    #
    ########################################

    axiom cached(addr_cons(H,L)) <-> cached_hi(H)

}


################################################################################
#
# Generic model of a client. This performs arbitrary client actions, except
# the it guarantees to use only ID's from the "client" side of the interface
# as defined by its parameter "side".
#
# TODO: should be able to generate this
#
################################################################################

type client_action = {ca_acquire,ca_finish,ca_perform,ca_fuse}

module tl_generic_client(mngr,ref,side) = {

   action tl_Grant(msg:gnt_id) = {}

   action tl_Probe(msg:prb_id) = {}

   action acquire(a:acq_id) = {
       call mngr.tl_Acquire(a)
   }

   action finish(f:fns_id) = {
       call mngr.tl_Finish(f)
   }

   action release(f:rls_id) = {
       call mngr.tl_Release(f)
   }
   action perform(lt:ltime, sid:id) = {
       assume side(sid) = client;
       call ref.perform(lt,sid)
   }

   action fuse(lt:ltime, lt1:ltime, sid:id) = {
       assume side(sid) = client;
       call ref.fuse(lt,lt1,sid)
   }

   action step = {
     local op:client_action, lt:ltime, lt1:ltime, sid:id, a:acq_id, f:fns_id, r:rls_id {
        if * {
	   call acquire(a)
        } else if * {
	   call finish(f)
        } else if * {
	   call finish(f)
        } else if * {
	   call release(r)
        } else if * {
	   call perform(lt,sid)
        } else {
	   call fuse(lt,lt1,sid)
        }
     }
   }
}

################################################################################
#
# Generic model of a manager. This performs arbitrary manager actions, except
# the it guarantees to use only ID's from the "manager" side of the interface
# as defined by its parameter "side".
#
# TODO: should be able to generate this
#
################################################################################

module tl_generic_manager(clnt,ref,side) = {
 
   action tl_Acquire(msg:acq_id) = {}

   action tl_Finish(msg:fns_id) = {}

   action tl_Release(msg:rls_id) = {}

   action grant(g:gnt_id) = {
      call clnt.tl_Grant(g)
   }

   action probe(g:prb_id) = {
      call clnt.tl_Probe(g)
   }

   action perform(lt:ltime, sid:id) = {
       assume side(sid) = manager;
       call ref.perform(lt,sid)
   }

   action fuse(lt:ltime, lt1:ltime, sid:id) = {
       assume side(sid) = manager;
       call ref.fuse(lt,lt1,sid)
   }

   action step = {
     local lt:ltime, lt1:ltime, sid:id, g:gnt_id, p:prb_id {
        if * {
	   call grant(g)
        } else if * {
	   call probe(p)
        } else if * {
	   call perform(lt,sid)
        } else {
	   call fuse(lt,lt1,sid)
        }
     }
   }
}


# ## just for a test

# module stubs = {
#     action tl_Acquire(msg:acq_id) = {}
#     action tl_Grant(msg:gnt_id) = {}
#     action tl_Finish(msg:fns_id) = {}
# }
# instantiate sys : stubs
# instantiate ref : reference
# individual side_(I:id) : side
# instantiate intf : tl_interface(ref,sys,sys,side_)

# export sys.tl_Acquire
# export sys.tl_Grant
# export sys.tl_Finish

