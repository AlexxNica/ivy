#lang ivy1.6

########################################
# A shard contains an interval of keys [lo,hi] from a hash table
#

include order


module table_shard(key,data) = {

    type range
    instantiate totally_ordered(range)
    
    type t = struct {
	lo : key,
	hi : key,
	first(Y:range) : key,
	second(Y:range) : data
    }

    function value(S:t,X:key):data

    instance iter : order_iterator(range)
    
    object impl = {
	
	interpret range -> bv[2]
	
	derived at(S,X,Y) = (first(S,Y) = X & second(S,Y) ~= 0)
	derived find(S,X) = some Y. at(S,X,Y)
	derived present(S,X) = at(S,X,find(S,X))
	
	definition value(S,X) = second(S,find(S,X)) if present(S,X) else 0

	conjecture at(S,X,Y) & at(S,X,Z) -> Y = Z
    }

}
