#lang ivy 1.6

include collections

module hash_table(key,value,shard) = {

    ###########################################
    # Interface

    # Set the value of a key
    action set(k:key, v:value)

    # Get the value of a key
    action get(k:key) returns (v:value)

    # Extract a shard from a hash table
    action extract_(lo:key,hi:key) returns(res:shard.t)

    # Incorporates a shard into a hash table
    action incorporate(s:shard.t)

    ###########################################
    # Specification

    function hash(X:key) : data
    init hash(X) = 0

    object spec = {
	before set {
	    hash(k) := v
	}

	after get {
	    assert v = hash(k)
	}

	after extract_ = {
	    assert shard.lo(res) = lo;
	    assert shard.hi(res) = hi;
	    assert (lo <= X & X <= hi) -> shard.value(res,X) = hash(X)
	}

	before incorporate(s:shard.t) = {
	    hash(K) := shard.value(s,K) if (shard.lo(s) <= K & K <= shard.hi(s)) else hash(K)
	}
    }

    ###########################################
    # Implementation

    object impl = {
	
	instance tab : ordered_map(key,value)

	implement set {
	    tab.set(k,v)
	}

	implement get {
	    v := tab.get(k)
	}

	implement extract_ = {
	    shard.second(res,X) := 0;
	    local idx : key.iter.t, pos : shard.iter.t {
		idx := tab.get_lub(idx);
		pos := shard.iter.begin(0);
		while pos < shard.iter.end & idx < key.end
		    invariant pos <= X -> shard.value(res,X) = 0
                    invariant lo <= X & X < idx -> shard.value(res,X) = tab.get(X)  
		{
		    shard.first(res,shard.iter.val(pos)) := key.iter.val(idx);
		    shard.second(res,shard.iter.val(pos)) := tab.get(key.iter.val(idx));
		    idx := tab.next(idx);
		    pos := shard.next(pos)
		}		
		shard.lo(res) := lo;
		if key.iter.begin(hi) <= pos {
		    shard.hi(res) := hi
		} else {
		    shard.hi(res) := key.iter.val(pos)
		}
	    }
	}

	implement incorporate(s:shard.t) = {
	    local lo:key.t, hi:key.t {
		lo := shard.lo(s);
		hi := shard.hio(s);
		tab.erase(lo,hi);
		local idx : key.iter.t, pos : shard.iter.t {
		    pos := shard.begin(0);
		    while pos < shard.iter.end
                        invariant lo <= X & X <= hi & shard.find(s,X) < pos -> shard.value(res,X) = tab.get(X)  
		    {
			local r : key.t {
			    r := shard.iter.val(pos);
			    if second(s,r) {
				tab.set(shard.first(s,r),shard.second(s,r));
			    }
			}			
		    }
		}
	    }
	}	

	conjecture tab.tab.entries(X) = hash(X)
    }

}

