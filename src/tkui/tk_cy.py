#
# Copyright (c) Microsoft Corporation. All Rights Reserved.
#

import ivy_ui
import ivy_ui_util as uu
import ivy_utils as iu
import ivy_graph_ui
from Tkinter import *
import Tkconstants, tkFileDialog
import Tix
import functools

# Functions for displaying a layed out CyElements graph in a Tk Canvas

# Transform x/y coordinates from Cytoscape to Tk

def xform(coord):
    return (coord[0],-coord[1])

def get_coord(position):
    return xform(tuple(position[s] for s in ('x','y')))

# Get arrow information generated by dot

def get_arrowend(element):
    p1 = get_coord(element['data']['bspline'][-1])
    p2 = get_coord(element['data']['arrowend'])
    return p1 + p2

# Return the dimension of an elenent as (x,y,w,h) where x and y are
# center coords.

def get_dimensions(element):
    data = element['data']
    position = element['position']
    return get_coord(position) + tuple(data[s] for s in ('width','height'))

# Return the bspline of an element as a list of coords
# (x0,y0,x1,y1,...)

def get_bspline(element):
    bspline = map(get_coord,element['data']['bspline'])
    coords = []
    for p in bspline:
        coords.append(p[0])
        coords.append(p[1])
    return coords
            

class TkCyCanvas(Canvas):

    # Make an octagon

    def create_octagon(self,*box,**kwargs):
        pts = octagon_points(*box)
        return self.create_polygon(*pts,**kwargs)

    # Create a shape with given dimansions on canvas

    def create_shape(self,shape,dimensions,**kwargs):
        x,y,w,h = dimensions
        x0,y0,x1,y1 = x-w/2, y-h/2, x+w/2, y+h/2
        method = {'oval':self.create_oval, 'octagon':self.create_octagon}[shape]
        if 'double' in kwargs:
            gap = kwargs['double']
            del kwargs['double']
            method(x0+gap,y0+gap,x1-gap,y1-gap,**kwargs)
        return method(x0,y0,x1,y1,**kwargs)

    # create all the graph elements

    def create_elements(cy_elements):
        for idx,elem in enumerate(cy_elements.elements):
            eid = get_id(elem)
            group = get_group(elem)
            self.elem_ids[get_obj(elem)] = eid
            if group == 'nodes':
                if get_classes(elem) != 'non_existing':
                    dims = get_dimensions(elem)
                    styles = self.get_node_styles(elem)
                    shape = self.create_shape(get_shape(elem),dims,tags=[eid,'shape'],**styles)
                    label = self.create_text(dims[0],dims[1],text=get_label(elem),tags=eid)
                    self.tag_bind(eid, "<Button-1>", lambda y, elem=elem: self.left_click_node(y,elem))
            elif group == 'edges':
                coords = get_bspline(elem)
                styles = self.get_edge_styles(elem)
                line = self.create_line(*coords,tags=eid,smooth="bezier",**styles)
                arrow = self.create_line(*get_arrowend(elem),tags=eid,arrow=LAST,**styles)
                self.tag_bind(eid, "<Button-1>", lambda y, elem=elem: self.left_click_edge(y,elem))

    def make_popup(self,actions,arg):
        tk = self.tk
        g = self.g
        popup = Menu(tk, tearoff=0)
        for lbl,cmd in actions:
            if lbl == '---':
                popup.add_separator()
            else:
                if cmd == None:
                    popup.add_command(label=lbl)
                else:
                    popup.add_command(label=lbl,command=functools.partial(cmd,arg))
        return popup
        

    # Make the node pop-up menu for left-click

    def make_node_popup(self,node):
        return self.make_popup(self.get_node_actions(node),node)
    
    # Make the edge pop-up menu for left-click

    def make_edge_popup(self,edge):
        return self.make_popup(self.get_edge_actions(edge),edge)

    # Handle a left click on a node

    def left_click_node(self,event,elem):
        n = self.node_from_cy_elem(elem)
        # display the popup menu
        popup = self.make_node_popup(n)
        try:
            popup.tk_popup(event.x_root, event.y_root, 0)
        finally:
            # make sure to release the grab (Tk 8.0a1 only)
            popup.grab_release()

    # Handle a left click on an edge

    def left_click_edge(self,event,elem):
        # display the popup menu 
        edge = self.edge_from_cy_elem(elem)
        popup = self.make_edge_popup(edge)
        try:
            popup.tk_popup(event.x_root, event.y_root, 0)
        finally:
            # make sure to release the grab (Tk 8.0a1 only)
            popup.grab_release()
